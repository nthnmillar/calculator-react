{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["entry","sum","calc","opPressed","cePressed","decPPressed","eqPressed","max","console","log","maxLength","replace","length","limit","document","getElementById","innerHTML","ACFunc","CEFunc","endClip","toString","oneFunc","numFunc","twoFunc","threeFunc","fourFunc","fiveFunc","sixFunc","sevenFunc","eightFunc","nineFunc","zeroFunc","zero","plusFunc","operFunc","minusFunc","dviFunc","multFunc","num","test","op","slice","decPFunc","equalFunc","split","i","parseFloat","toFixed","App","useState","displayEntry","displaySum","id","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e103a360.chunk.js","sourcesContent":["import React, {useState, useEffect } from 'react';\r\nimport 'bootstrap';\r\n\r\n//Stores the first string for the display screen\r\nlet entry= \"0\";\r\n//Stores the second string for the display screen\r\nlet sum = \"0\";\r\n//Stores calcuation result\r\nlet calc = 0;\r\n//For checking if certain buttons have been pressed or not\r\nlet opPressed = false;\r\nlet cePressed = false;\r\nlet decPPressed = false;\r\nlet eqPressed = false;\r\n\r\n//Displays 0 on the screen when the document loads\r\n// function zeroStart(){document.getElementById(\"disNum\").innerHTML = entry; document.getElementById(\"disString\").innerHTML = sum;}\r\n\r\n//Checks if the strings have reached a maximum length before being too long to fit on the display screen\r\nfunction max(){\r\n  console.log(\"max sum\", sum);\r\n  const maxLength = sum.replace(/\\&#247;|\\&#215;/g, \" \");\r\n  console.log(\"max sum Replaced\", maxLength);\r\n\r\n  if (entry.length > 8 || maxLength.length >= 23){\r\n    console.log(sum);\r\n    return true;\r\n  }else{\r\n    return false;\r\n  }\r\n}\r\n\r\n//For clearing the screen\r\nfunction limit(){\r\n      entry = \"0\";\r\n      sum = \"0\";\r\n      calc = 0;\r\n     /*\r\n      setDisplayEntry(\"0\");\r\n      setDisplaySum(\"Limit\");\r\n   */  \r\n        document.getElementById(\"disNum\").innerHTML = \"0\";\r\n        document.getElementById(\"disString\").innerHTML =\"Limit\";\r\n    \r\n}\r\n\r\n//Resets the calculator\r\nfunction ACFunc(){\r\n  //Resets final result  \r\n  calc = 0;\r\n  //Turns the operator switch off\r\n  //opSwitch = false;\r\n  //Turns the decimal point switch off\r\n  decPPressed = false;\r\n  //Turns the equal button swith off\r\n  eqPressed = false;\r\n  //Clears strings\r\n  entry = \"0\";\r\n  sum = \"0\";\r\n /*\r\n  setDisplayEntry(entry);\r\n  setDisplaySum(sum);\r\n */\r\n  document.getElementById(\"disNum\").innerHTML = entry;\r\n  document.getElementById(\"disString\").innerHTML = sum;\r\n  \r\n}\r\n\r\n//Removes last entry\r\nfunction CEFunc(){\r\n  //Turns the button pressed switches off\r\n  opPressed = false;\r\n  cePressed = true;\r\n  decPPressed = false;\r\n  entry = \"0\";    \r\n  //Removes an operator or group of numbers from display string 2\r\n\r\n  let endClip = /\\+$|\\-$|\\&#247;$|\\&#215;$|\\d+\\.\\d+$|\\d+$|\\.$|\\d+\\.$|^\\-\\d+$|^\\-\\d+\\.\\d+$/;\r\n\r\n  if (typeof sum !== 'string')\r\n    {\r\n      console.log(\"Sum IS string\")\r\n      console.log(\"CE sum before replace\",sum)\r\n      sum.replace(endClip,\"\");\r\n      console.log(\"CE sum after replace\",sum)\r\n    }else{  \r\n      console.log(\"Sum NOT string\")\r\n      sum.toString();\r\n      console.log(\"CE sum before replace\",sum)\r\n      sum.replace(endClip,\"\");\r\n      console.log(\"CE sum after replace\",sum)\r\n    }\r\n\r\n  //A zero remains if CE removes everything from display string 2  \r\n  if(sum === \"\"){\r\n      sum = \"0\";\r\n    }\r\n        /*\r\n    setDisplayEntry(entry);\r\n    setDisplaySum(sum);\r\n */\r\n    document.getElementById(\"disNum\").innerHTML = entry;\r\n    document.getElementById(\"disString\").innerHTML = sum;\r\n   \r\n}\r\n\r\n//Activates functions when their buttons are pressed\r\nfunction oneFunc(){numFunc(\"1\");}\r\nfunction twoFunc(){numFunc(\"2\");}\r\nfunction threeFunc(){numFunc(\"3\");}\r\nfunction fourFunc(){numFunc(\"4\");}\r\nfunction fiveFunc(){numFunc(\"5\");}\r\nfunction sixFunc(){numFunc(\"6\");}\r\nfunction sevenFunc(){numFunc(\"7\");}\r\nfunction eightFunc(){numFunc(\"8\");}\r\nfunction nineFunc(){numFunc(\"9\");}\r\nfunction zeroFunc(){naughtFunc(\"0\");}\r\n\r\nfunction plusFunc(){operFunc(\"+\");}\r\nfunction minusFunc(){operFunc(\"-\");}\r\nfunction dviFunc(){operFunc(\"&#247;\");}\r\nfunction multFunc(){operFunc(\"&#215;\");}\r\n\r\n//Adds numbers to both strings on the screen\r\nfunction numFunc(num){  \r\n  if (max() === false){    \r\n    //Clears zeros from the display screen when a number is pressed or after the equal button has been pressed\r\n    if(entry === \"0\" && sum === \"0\" || calc === \"0\" && eqPressed === true){\r\n     entry=\"\";\r\n     sum=\"\";\r\n     calc = 0;\r\n     eqPressed = false; \r\n    } \r\n    //Clears zero from string 1 on the screen if the CE button has been pressed\r\n    if(entry === \"0\" && cePressed === true){entry=\"\";}\r\n    //Turns the operator switch off\r\n    opPressed = false; \r\n    //Removes operator if on string 1\r\n    entry = entry.replace(/\\+|\\-|\\&#247;|\\&#215;/g, \"\");\r\n    //Adds entered number onto the display strings\r\n    if (cePressed === false){\r\n      entry += num;\r\n      sum += num;\r\n   /*\r\n      setDisplayEntry(entry);\r\n      setDisplaySum(sum);\r\n     */\r\n      {document.getElementById(\"disNum\").innerHTML = entry;}\r\n      {document.getElementById(\"disString\").innerHTML = sum;}\r\n    \r\n    } \r\n    //Only adds numbers after CE has been pressed if the last character is not a number\r\n    else if (/\\d$/.test(sum) !== true && cePressed === true){\r\n      cePressed = false;\r\n      entry += num;\r\n      sum += num;\r\n        /*\r\n      setDisplayEntry(entry);\r\n      setDisplaySum(sum);\r\n     */\r\n      {document.getElementById(\"disNum\").innerHTML = entry;}\r\n      {document.getElementById(\"disString\").innerHTML = sum;}\r\n     \r\n    }\r\n  }else{\r\n    limit();\r\n  }  \r\n}\r\n\r\n//Inserts operators into display strings 1 and 2\r\nfunction operFunc(op){\r\n  //For being able to insert calculations after the equal button has been pressed\r\n  if (eqPressed === true){\r\n    eqPressed = false;\r\n    sum = calc;\r\n    calc = 0;\r\n   }\r\n  \r\n  if (max() === false){\r\n    decPPressed = false;\r\n    //Removes decimal point if there are no numbers after it \r\n    if (/\\.$/.test(sum) === true){\r\n      sum = sum.slice(0, -1);\r\n    } \r\n    //Removes all zero's as well as the decimal point if there are no decimal numbers above 0 \r\n    if (/\\.0+$/.test(sum) === true){  \r\n      sum = sum.replace(/\\.0+$/, \"\");\r\n    } \r\n    //Removees extra 0's if there are any after decimal numbers\r\n    if (/\\./g.test(sum) === true && /0+$/.test(sum) === true){\r\n      sum = sum.replace(/0+$/, \"\");\r\n    } \r\n    //Only adds an operator to string 1 during a calculation if a zero and an operator is not already on the display screen\r\n    if(entry !== \"0\" && opPressed === false && sum !== \"0\"){\r\n      //Inserts an operator into display string 1\r\n      entry = op; \r\n       /*\r\n      setDisplayEntry(entry);\r\n      */\r\n      {document.getElementById(\"disNum\").innerHTML = entry;}\r\n     \r\n      //Only adds one operator to string 2 if string 2 is not 0 and the operator switch is off \r\n     if(opPressed === false && sum !== \"0\"){\r\n       opPressed = true;\r\n       sum += op;\r\n        /*\r\n       setDisplaySum(sum);\r\n        */\r\n       {document.getElementById(\"disString\").innerHTML = sum;}\r\n       \r\n     }      \r\n      //If the CE button has been pressed with 0 now on display string 1 and there isn't already an operator on the display string 2, an operator should still be able to be entered    \r\n    }\r\n    if(cePressed === true && opPressed === false && sum !== \"0\" && /\\d$/.test(sum) === true){\r\n      opPressed = true;\r\n      entry = op;           \r\n      sum += op;    \r\n           /*  \r\n      setDisplayEntry(entry);\r\n      setDisplaySum(sum);\r\n         */\r\n      {document.getElementById(\"disNum\").innerHTML = entry;}\r\n      {document.getElementById(\"disString\").innerHTML = sum;}\r\n   \r\n    }\r\n  }else{\r\n    limit();\r\n  }\r\n}\r\n\r\n//For when the zero button is pressed\r\nfunction naughtFunc(zero){\r\nif (max() === false){    \r\n  //Only if there a number is pressed already should zero be able to be entered on the screen\r\n  if(entry !== \"0\" && opPressed === false){\r\n      entry += zero; \r\n      sum += zero;\r\n        /*\r\n      setDisplayEntry(entry);\r\n      setDisplaySum(sum);\r\n      */  \r\n      {document.getElementById(\"disNum\").innerHTML = entry;}\r\n      {document.getElementById(\"disString\").innerHTML = sum;}\r\n       \r\n    }\r\n    //Adds more zeros after the decimal point button has been pressed\r\n    else if(decPPressed === true){   \r\n      entry += \"0\";  \r\n      sum += \"0\";\r\n        /*\r\n      setDisplayEntry(entry);\r\n      setDisplaySum(sum);\r\n      */ \r\n      {document.getElementById(\"disNum\").innerHTML = entry;} \r\n      {document.getElementById(\"disString\").innerHTML = sum;}\r\n            \r\n     }\r\n  }else{\r\n    limit();\r\n  }\r\n}\r\n\r\nfunction decPFunc(){\r\n  if (max() === false){ \r\n    //Inserts a decimal point into the display strings\r\n    if (decPPressed === false && opPressed === false && cePressed === false){    \r\n      decPPressed = true;    \r\n      entry += \".\";   \r\n      sum += \".\";\r\n        /*\r\n      setDisplayEntry(entry);\r\n      setDisplaySum(sum);\r\n      */ \r\n      {document.getElementById(\"disNum\").innerHTML = entry;}\r\n      {document.getElementById(\"disString\").innerHTML = sum;}\r\n       \r\n     }\r\n    //if there is an operator on the screen, place zero in front of decimal point when its button is pressed\r\n    else if (decPPressed === false && opPressed === true && cePressed === false){\r\n        opPressed =false;\r\n        decPPressed = true;    \r\n        entry = \"0.\";   \r\n        sum += \"0.\";\r\n          /*\r\n        setDisplayEntry(entry);\r\n        setDisplaySum(sum);\r\n        */  \r\n        {document.getElementById(\"disNum\").innerHTML = entry;}\r\n        {document.getElementById(\"disString\").innerHTML = sum;} \r\n         \r\n      } \r\n    //A decimal point can't be entered next to an already entered number after the CE button has been pressed\r\n    else if (decPPressed === false && /\\d$/.test(sum) !== true && cePressed === true){\r\n      cePressed = false;\r\n      decPPressed = true;\r\n      entry = \"0.\";\r\n      sum += \"0.\";\r\n       /*\r\n      setDisplayEntry(entry);\r\n      setDisplaySum(sum);\r\n      */\r\n      {document.getElementById(\"disNum\").innerHTML = entry;} \r\n      {document.getElementById(\"disString\").innerHTML = sum;} \r\n     \r\n          \r\n    }\r\n    \r\n    //Decimal point button works after the screen is cleared with CE\r\n    else if (decPPressed === false && opPressed === false && sum ===\"0\" && cePressed === true){\r\n      cePressed = false;\r\n      decPPressed = true;\r\n      entry += \".\";  \r\n      sum += \".\";\r\n        /*\r\n      setDisplayEntry(entry);\r\n      setDisplaySum(sum); \r\n     */ \r\n      {document.getElementById(\"disNum\").innerHTML = entry;} \r\n      {document.getElementById(\"disString\").innerHTML = sum;} \r\n       \r\n    }\r\n  }else{\r\n    limit();\r\n  }\r\n}\r\n\r\n//Converts the sum string into intergers and arithmetic opertators, returns the result of the calculation back as a string to display screen one. The result can still then be used for further calculations\r\nfunction equalFunc(){\r\n  if (/\\d$/.test(sum) === true){\r\n  //Replaces html operator codes with js operator strings, inserts spaces beside operators and then splits the string into an array from those spaces.\r\n   sum = sum.replace(/\\&#247;/g, \"/\").replace(/\\&#215;/g, \"*\").replace(/(\\/)/g, \" $1 \").replace(/(\\*)/g, \" $1 \").replace(/(\\+)/g, \" $1 \").replace(/((?!^)\\-)/g, \" $1 \").split(\" \");\r\n   \r\n      for(var i = 0; i < sum.length; i++){\r\n          //Adds the first number into the calculation\r\n          if (i === 0 ){\r\n            calc += parseFloat(sum[i]);\r\n          }\r\n          //Divide calculation by next number\r\n          if (/\\//.test(sum[i]) === true){\r\n            calc /= parseFloat(sum[i + 1]);\r\n          }  \r\n          //Multiply calculation by next number\r\n          if (/\\*/.test(sum[i]) === true){\r\n            calc *= parseFloat(sum[i + 1]);\r\n          }  \r\n         //Add calculation by next number\r\n          if (/\\+/.test(sum[i]) === true){\r\n            calc += parseFloat(sum[i + 1]);\r\n          }\r\n          //Minus calculation by next number\r\n          if (/^\\-$/.test(sum[i]) === true){\r\n            calc -= parseFloat(sum[i + 1]);\r\n          }  \r\n      }\r\n      //Rounds off the calcuation into a string with limited decimals and removes excess zeros\r\n      calc = calc.toFixed(2).replace(/\\.0+$|0+$/,\"\");\r\n      //Clears the screen of the result is too long\r\n      if (calc.length > 8){ \r\n        limit();        \r\n      }\r\n      //Otherwise inserts the result onto the display screen\r\n      else{\r\n          /*\r\n        setDisplayEntry(calc);\r\n        setDisplaySum(sum +=\"=\"+calc); \r\n         */\r\n        document.getElementById(\"disNum\").innerHTML = calc;\r\n        document.getElementById(\"disString\").innerHTML +=\"=\"+calc;\r\n     \r\n        eqPressed = true;\r\n        //Resets the display strings if the result is zero\r\n        if (calc === \"0\"){\r\n            entry = \"0\";\r\n            sum = \"0\";\r\n        }\r\n    }  \r\n  }\r\n}\r\n\r\nfunction App(){\r\n  let [displayEntry,setDisplayEntry] = useState(\"0\");\r\n  // Stores the second string for the display screen\r\n  let [displaySum, setDisplaySum] = useState(\"0\");\r\n  \r\n  return (\r\n    <div id=\"calcBase\" className= \"container\">   \r\n      <div id=\"padDiv\">\r\n        <h1 className=\"text-center\">CALCULATOR</h1>\r\n        <div id=\"display\" className=\"text-right\">\r\n            <p id=\"disNum\">{displayEntry}</p>\r\n            <p id=\"disString\">{displaySum}</p>\r\n        </div>\r\n          <button onClick={ACFunc} id=\"AC\">AC</button>\r\n          <button onClick={CEFunc} id=\"clear\">CE</button>\r\n          <button onClick={dviFunc} id=\"divide\">&#247;</button>\r\n          <button onClick={multFunc} id=\"multiply\">&#215;</button>\r\n        \r\n          <button onClick={sevenFunc} id=\"seven\">7</button>\r\n          <button onClick={eightFunc} id=\"eight\">8</button>\r\n          <button onClick={nineFunc} id=\"nine\">9</button>\r\n          <button onClick={minusFunc} id=\"subtract\">-</button>\r\n        \r\n          <button onClick={fourFunc} id=\"four\">4</button>\r\n          <button onClick={fiveFunc} id=\"five\">5</button>\r\n          <button onClick={sixFunc} id=\"six\">6</button>\r\n          <button onClick={plusFunc} id=\"add\">+</button>\r\n          \r\n          <button onClick={oneFunc} id=\"one\">1</button>\r\n          <button onClick={twoFunc} id=\"two\">2</button>\r\n          <button onClick={threeFunc} id=\"three\">3</button>\r\n        \r\n          <button onClick={equalFunc} id=\"equals\">=</button>     \r\n          <button onClick={zeroFunc} id=\"zero\">0</button>\r\n          <button onClick={decPFunc} id=\"decimal\">.</button>   \r\n      </div>          \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/* import './index.css'; */\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './style.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}