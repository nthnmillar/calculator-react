{"version":3,"sources":["reducers/mathEntryReducer.js","reducers/mathSumReducer.js","store.js","actions/displayActions.js","App.js","serviceWorker.js","index.js"],"names":["mathEntryReducer","state","entry","action","type","payload","mathSumReducer","sum","rootReducer","combineReducers","mathEntry","mathSum","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","displayEntryAction","displaySumAction","mapStatetoProps","mapDispatchToProps","dispatch","displayEntry","displaySum","screenEntry","screenSum","calculation","operatorPressed","cePressed","decPointPressed","equalPressed","currentOperator","entryDispatched","store","sumDispatched","maxLength","console","log","maxLengthString","toString","replace","length","clearScreen","acReset","ceReset","numPress","num","test","operatorPress","op","slice","decPointPress","equalPress","sumToDisplay","split","i","splice","negInt","concat","parseFloat","toFixed","Array","isArray","Buttons","onClick","id","zero","ConnectedDisplayEntry","connect","props","dangerouslySetInnerHTML","__html","ConnectedDisplaySum","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f771bd27.chunk.js","sourcesContent":["\r\nconst mathEntryReducer = (state = {entry:\"0\"}, action) =>{ \r\n    if (action.type === 'DISPLAY_ENTRY'){\r\n      return {entry: action.payload};\r\n    }\r\n    return state;\r\n  }\r\n  \r\n  export default mathEntryReducer;","\r\nconst mathSumReducer = (state = {sum:\"0\"}, action) =>{ \r\n    if (action.type === 'DISPLAY_SUM'){\r\n      return {sum: action.payload};\r\n    }\r\n    return state;\r\n  }\r\n\r\n  export default mathSumReducer;\r\n  ","import { createStore, combineReducers} from 'redux';\r\n\r\nimport mathEntryReducer from \"./reducers/mathEntryReducer\";\r\nimport mathSumReducer from \"./reducers/mathSumReducer\";\r\n\r\n// Root Reducers\r\nconst rootReducer = combineReducers({\r\n    mathEntry: mathEntryReducer,\r\n    mathSum: mathSumReducer, \r\n  });\r\n  \r\n// Store\r\nexport default createStore(\r\n  rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n );","// Actions\r\n\r\n// Actions Type\r\n//const DISPLAY_ENTRY = 'entry';\r\n//const DISPLAY_SUM = 'sum'; \r\n\r\n\r\nexport function displayEntryAction(entry){\r\n  return {\r\n  type: 'DISPLAY_ENTRY',\r\n  payload: entry,\r\n  };\r\n}\r\n\r\nexport function displaySumAction(sum){\r\n  return {\r\n  type: 'DISPLAY_SUM',\r\n  payload: sum,\r\n  };\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap';\r\n//import { createStore, combineReducers} from 'redux';\r\nimport { Provider, connect } from 'react-redux';\r\n//import {entryDispatched, sumDispatched } from './calculate';\r\n//import calculate from './calculate';\r\nimport store from \"./store\";\r\n\r\nimport {displayEntryAction, displaySumAction} from './actions/displayActions';\r\n\r\n// mapStatetoProps\r\nconst mapStatetoProps = (state => {\r\n  return {\r\n    entry:state.mathEntry.entry,\r\n    sum:state.mathSum.sum,\r\n  };\r\n});\r\n\r\n// mapDispatchToProps\r\nconst mapDispatchToProps = dispatch => ({\r\n    displayEntry: () => dispatch(displayEntryAction()),\r\n    displaySum: () => dispatch(displaySumAction()),\r\n});\r\n\r\nlet screenEntry= \"0\";\r\nlet screenSum = \"0\";\r\nlet calculation = 0;\r\nlet operatorPressed = false;\r\nlet cePressed = false;\r\nlet decPointPressed = false;\r\nlet equalPressed = false;\r\nlet currentOperator = \"\";\r\n\r\nconst entryDispatched = (entry) =>{\r\n    store.dispatch(displayEntryAction(entry));\r\n}\r\n\r\nconst sumDispatched = (sum) => {\r\n    store.dispatch(displaySumAction(sum));\r\n}\r\n\r\nconst maxLength = () =>{\r\n    console.log(\"maxLength screenSum\", screenSum);\r\n    const maxLengthString = screenSum.toString().replace(/\\&#247;|\\&#215;/g, \" \");\r\n    console.log(\"maxLength screenSum Replaced\", maxLengthString);\r\n    \r\n    if (screenEntry.length > 8 || maxLengthString.length >= 23){\r\n      console.log(screenSum);\r\n      return true;\r\n    }else{\r\n      return false;\r\n    }\r\n}\r\n\r\nconst clearScreen = () => {\r\n    screenEntry = \"0\";\r\n    screenSum = \"0\";\r\n    calculation = 0;\r\n    entryDispatched(\"0\");\r\n    sumDispatched(\"Limit\");\r\n    //store.dispatch(displayEntryAction(\"0\"));\r\n    //store.dispatch(displaySumAction(\"Limit\"));      \r\n}\r\n\r\nconst acReset = () => {\r\n    calculation = 0;\r\n    decPointPressed = false;\r\n    equalPressed = false;\r\n    screenEntry = \"0\";\r\n    screenSum = \"0\";\r\n    entryDispatched(screenEntry);\r\n    sumDispatched(screenSum);\r\n    //store.dispatch(displayEntryAction(screenEntry));\r\n   // store.dispatch(displaySumAction(screenSum));   \r\n}\r\n\r\nconst ceReset = () => {  \r\n    operatorPressed = false;\r\n    cePressed = true;\r\n    decPointPressed = false;\r\n    screenEntry = \"0\";    \r\n    const endClip = /\\+$|\\-$|\\&#247;$|\\&#215;$|\\d+\\.\\d+$|\\d+$|\\.$|\\d+\\.$|^\\-\\d+$|^\\-\\d+\\.\\d+$/;\r\n    console.log(\"CE screenSum before replace\",screenSum)\r\n\r\n    if (equalPressed){\r\n      return\r\n    }else if (!equalPressed){\r\n      console.log(\"epPressed\", equalPressed, \"screenSum\", screenSum);\r\n      screenSum = screenSum.toString().replace(endClip,\"\");\r\n    }\r\n    console.log(\"CE screenSum after replace\",screenSum)\r\n \r\n  if(screenSum === \"\"){\r\n      screenSum = \"0\";\r\n    }\r\n\r\n    entryDispatched(screenEntry);\r\n    sumDispatched(screenSum);\r\n   // store.dispatch(displayEntryAction(screenEntry));\r\n   // store.dispatch(displaySumAction(screenSum));   \r\n    \r\n}\r\n\r\nconst numPress = (num) => { \r\n  if (screenEntry === \"-\"  && /\\d$/.test(num) == true){\r\n    screenSum += currentOperator;\r\n    screenSum += screenEntry;\r\n    currentOperator = \"\";\r\n    sumDispatched(screenSum);\r\n  //  store.dispatch(displaySumAction(screenSum));\r\n  } \r\n  \r\n  if (screenEntry !== \"-\" && /\\d$/.test(num) === true) {      \r\n    console.log(\"Number adds operator to Sum display\", currentOperator, \"screenSum\", screenSum)\r\n    screenSum += currentOperator;\r\n    currentOperator = \"\";\r\n    sumDispatched(screenSum);\r\n  //  store.dispatch(displaySumAction(screenSum));\r\n  } \r\n\r\n  if (maxLength() === false){     \r\n    if(screenEntry === \"0\" && screenSum === \"0\" || calculation === \"0\" && equalPressed === true){\r\n      screenEntry=\"\";\r\n      screenSum=\"\";\r\n      calculation = 0;\r\n      equalPressed = false; \r\n    }\r\n\r\n  if(screenEntry === \"0\" && cePressed === true)\r\n    {\r\n      screenEntry=\"\";\r\n    }\r\n\r\n    operatorPressed = false; \r\n    screenEntry = screenEntry.replace(/\\+|\\-|\\&#247;|\\&#215;/g, \"\");\r\n\r\n    if (cePressed === false  && num !== \"-\" ){\r\n      screenEntry += num;\r\n      screenSum += num;\r\n      entryDispatched(screenEntry);\r\n      sumDispatched(screenSum);\r\n    //  store.dispatch(displayEntryAction(screenEntry));\r\n    //  store.dispatch(displaySumAction(screenSum));   \r\n    }\r\n\r\n    else if (/\\d$/.test(screenSum) !== true && cePressed === true  && num !== \"-\" ){\r\n      cePressed = false;\r\n      screenEntry += num;\r\n      screenSum += num;\r\n      entryDispatched(screenEntry);\r\n      sumDispatched(screenSum);\r\n    //  store.dispatch(displayEntryAction(screenEntry));\r\n    //  store.dispatch(displaySumAction(screenSum));   \r\n    }\r\n  }else{\r\n    clearScreen();\r\n  }  \r\n}\r\n\r\nconst operatorPress = (op) => {\r\n  if (equalPressed === true){\r\n    equalPressed = false;\r\n    screenSum = calculation;\r\n    calculation = 0;\r\n   }\r\n\r\n  if (maxLength() === false){\r\n    decPointPressed = false;\r\n\r\n    if (/\\.$/.test(screenSum) === true){\r\n      screenSum = screenSum.slice(0, -1);\r\n    } \r\n\r\n    if (/\\.0+$/.test(screenSum) === true){  \r\n      screenSum = screenSum.replace(/\\.0+$/, \"\");\r\n    } \r\n\r\n    if (/\\./g.test(screenSum) === true && /0+$/.test(screenSum) === true){\r\n      screenSum = screenSum.replace(/0+$/, \"\");\r\n    } \r\n\r\n    if(screenEntry !== \"0\" && operatorPressed === false  && screenSum !== \"0\"){\r\n      screenEntry = op; \r\n      entryDispatched(screenEntry);\r\n      // store.dispatch(displayEntryAction(screenEntry));\r\n      \r\n      if(op !== \"-\"){\r\n        currentOperator = op;\r\n      }\r\n\r\n      if(operatorPressed === false && screenSum !== \"0\" ){    \r\n        if(op !== \"-\"){\r\n          currentOperator = op;\r\n        }\r\n\r\n      }         \r\n    }\r\n\r\n    if(cePressed === true  && operatorPressed === false  && screenSum !== \"0\" && /\\d$/.test(screenSum) === true){\r\n      operatorPressed = true;\r\n      screenEntry = op;  \r\n      \r\n      if(op !== \"-\"){\r\n        currentOperator = op;\r\n      }\r\n    }\r\n  }else{\r\n    clearScreen();\r\n  }\r\n}\r\n\r\nconst zeroPress = (zero) => {\r\nif (maxLength() === false){    \r\n\r\n  if(screenEntry !== \"0\"  && operatorPressed === false ){\r\n      screenEntry += zero; \r\n      screenSum += zero;\r\n      entryDispatched(screenEntry);\r\n      sumDispatched(screenSum);\r\n     // store.dispatch(displayEntryAction(screenEntry));\r\n     // store.dispatch(displaySumAction(screenSum));     \r\n    }\r\n\r\n    else if(decPointPressed === true){   \r\n      screenEntry += \"0\";  \r\n      screenSum += \"0\";\r\n      entryDispatched(screenEntry);\r\n      sumDispatched(screenSum);\r\n    //  store.dispatch(displayEntryAction(screenEntry));\r\n    //  store.dispatch(displaySumAction(screenSum));               \r\n     }\r\n  }else{\r\n    clearScreen();\r\n  }\r\n}\r\n\r\nconst decPointPress = () => {\r\n  if (maxLength() === false){ \r\n    if (decPointPressed === false  && operatorPressed === false && cePressed === false){    \r\n      decPointPressed = true;    \r\n      screenEntry += \".\";   \r\n      screenSum += \".\";\r\n      entryDispatched(screenEntry);\r\n      sumDispatched(screenSum);\r\n     // store.dispatch(displayEntryAction(screenEntry));\r\n    //  store.dispatch(displaySumAction(screenSum));    \r\n\r\n    }else if (decPointPressed === false  && operatorPressed === true  && cePressed === false){\r\n      operatorPressed = false;\r\n      decPointPressed = true;    \r\n      screenEntry = \"0.\";   \r\n      screenSum += \"0.\";\r\n      entryDispatched(screenEntry);\r\n      sumDispatched(screenSum);\r\n    //  store.dispatch(displayEntryAction(screenEntry));\r\n    //  store.dispatch(displaySumAction(screenSum));       \r\n\r\n    }else if (decPointPressed === false && /\\d$/.test(screenSum) !== true && cePressed === true){\r\n      cePressed = false;\r\n      decPointPressed = true;\r\n      screenEntry = \"0.\";\r\n      screenSum += \"0.\";\r\n      entryDispatched(screenEntry);\r\n      sumDispatched(screenSum);\r\n    //  store.dispatch(displayEntryAction(screenEntry));\r\n    //  store.dispatch(displaySumAction(screenSum));         \r\n    \r\n    }else if (decPointPressed === false  && operatorPressed === false  && screenSum ===\"0\" && cePressed === true){\r\n      cePressed = false;\r\n      decPointPressed = true;\r\n      screenEntry += \".\";  \r\n      screenSum += \".\";\r\n      entryDispatched(screenEntry);\r\n      sumDispatched(screenSum);\r\n    //  store.dispatch(displayEntryAction(screenEntry));\r\n    //  store.dispatch(displaySumAction(screenSum));    \r\n    }\r\n  }else{\r\n    clearScreen();\r\n  }\r\n}\r\n\r\nconst equalPress = () => {\r\n  if (/\\d$/.test(screenSum) === true){\r\n    let sumToDisplay = screenSum;\r\n    console.log(\"equalPress screenSum String\", screenSum);\r\n    screenSum = screenSum.replace(/\\&#247;/g, \"/\").replace(/\\&#215;/g, \"*\").replace(/(\\/)/g, \" $1 \").replace(/(\\*)/g, \" $1 \").replace(/(\\+)/g, \" $1 \").replace(/((?!^)\\-)/g, \" $1 \").split(\" \");\r\n    console.log(\"equalPress screenSum Array\", screenSum);\r\n\r\n    // Sort Array \r\n    for(var i = 0; i < screenSum.length; i++){\r\n      if(screenSum[i] === \"\"){  \r\n        screenSum.splice(i,1); \r\n        console.log (\"space removed\", screenSum, \"screenSum[i]\", screenSum[i]);   \r\n      }\r\n      if (screenSum[i] === \"-\" && /\\+|\\-|\\*|\\//.test(screenSum[i-1]) === true ){\r\n        const negInt = screenSum[i].concat(screenSum[i+1]);\r\n        screenSum.splice(i,1);\r\n        screenSum.splice(i,1);\r\n        screenSum.splice(i,0,negInt) \r\n        console.log(\"negetive interger\", screenSum); \r\n      }\r\n    }\r\n\r\n    // Calculate Array\r\n    for(var i = 0; i < screenSum.length; i++){\r\n\r\n      if (i === 0 ){\r\n        calculation += parseFloat(screenSum[i]);\r\n      } \r\n      if (/\\//.test(screenSum[i]) == true){\r\n        calculation /= parseFloat(screenSum[i + 1]);\r\n      }    \r\n      if (/\\*/.test(screenSum[i]) == true){\r\n        calculation *= parseFloat(screenSum[i + 1]);\r\n      }   \r\n      if (/\\+/.test(screenSum[i]) == true){\r\n        calculation += parseFloat(screenSum[i + 1]);\r\n      }              \r\n      if(/^\\-$/.test(screenSum[i]) == true) {\r\n        console.log(\"just a minus\",calculation);\r\n        calculation -= parseFloat(screenSum[i + 1]);\r\n      }\r\n    }\r\n   \r\n    console.log(\"Equal calculation\",calculation);\r\n    calculation = calculation.toFixed(4).replace(/\\.0+$|0+$/,\"\");\r\n\r\n    if (calculation.length > 8){ \r\n    clearScreen();        \r\n      \r\n    }else{\r\n        entryDispatched(calculation);\r\n        sumDispatched(sumToDisplay += \"=\" + calculation);\r\n    //  store.dispatch(displayEntryAction(calculation));\r\n    //  store.dispatch(displaySumAction(sumToDisplay += \"=\" + calculation));\r\n      console.log(\"array clacuation return, calculation\", \"screenSum\", screenSum, \"is array?\", Array.isArray(screenSum))  \r\n      equalPressed = true;\r\n\r\n      if (calculation === \"0\"){\r\n        screenEntry = \"0\";\r\n        screenSum = \"0\";\r\n      }\r\n    }  \r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst DisplayEntry = (props) => {\r\n  return (\r\n    <>\r\n      <p dangerouslySetInnerHTML={{ __html:props.entry}} id=\"display\"></p>\r\n    </>\r\n  )\r\n}\r\n\r\nconst DisplaySum = (props) => {\r\n  return (\r\n    <>\r\n      <p dangerouslySetInnerHTML={{ __html:props.sum}} id=\"disString\"></p>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Buttons = () => {\r\n  return (\r\n    <>\r\n      <button onClick={acReset} id=\"clear\">AC</button>\r\n      <button onClick={ceReset} id=\"CE\">CE</button>\r\n      <button onClick={() => {operatorPress(\"&#247;\")}} id=\"divide\">&#247;</button>\r\n      <button onClick={() => {operatorPress(\"&#215;\")}} id=\"multiply\">&#215;</button>  \r\n      <button onClick={() => {numPress(\"7\")}} id=\"seven\">7</button>\r\n      <button onClick={() => {numPress(\"8\")}} id=\"eight\">8</button>\r\n      <button onClick={() => {numPress(\"9\")}} id=\"nine\">9</button>\r\n      <button onClick={() => {operatorPress(\"-\")}} id=\"subtract\">-</button>   \r\n      <button onClick={() => {numPress(\"4\")}} id=\"four\">4</button>\r\n      <button onClick={() => {numPress(\"5\")}} id=\"five\">5</button>\r\n      <button onClick={() => {numPress(\"6\")}} id=\"six\">6</button>\r\n      <button onClick={() => {operatorPress(\"+\")}} id=\"add\">+</button>    \r\n      <button onClick={() => {numPress(\"1\")}} id=\"one\">1</button>\r\n      <button onClick={() => {numPress(\"2\")}} id=\"two\">2</button>\r\n      <button onClick={() => {numPress(\"3\")}} id=\"three\">3</button>  \r\n      <button onClick={equalPress} id=\"equals\">=</button>     \r\n      <button onClick={() => {zeroPress(\"0\")}} id=\"zero\">0</button>\r\n      <button onClick={decPointPress} id=\"decimal\">.</button> \r\n    </> \r\n  )\r\n}\r\n\r\nconst ConnectedDisplayEntry = connect(mapStatetoProps, mapDispatchToProps)(DisplayEntry);\r\nconst ConnectedDisplaySum = connect(mapStatetoProps, mapDispatchToProps)(DisplaySum);\r\n\r\nconst App = () =>{ \r\n  return (\r\n    <Provider store={store}>\r\n      <div id=\"calcBase\" className= \"container\">   \r\n        <div id=\"padDiv\">\r\n          <h1 className=\"text-center\">CALCULATOR</h1>\r\n          <div id=\"screen\" className=\"text-right\">\r\n            <ConnectedDisplayEntry/>\r\n            <ConnectedDisplaySum/>\r\n          </div>\r\n          <Buttons/>\r\n        </div>          \r\n      </div>]\r\n    </Provider>  \r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/* import './index.css'; */\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './style.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}