{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["screenEntry","screenSum","calculation","operatorPressed","cePressed","decPointPressed","equalPressed","currentOperator","displaySet","entry","sum","document","getElementById","innerHTML","maxLength","console","log","maxLengthString","toString","replace","length","clearScreen","acReset","ceReset","numPress","num","test","operatorPress","op","slice","decPointPress","equalPress","split","i","splice","negInt","concat","parseFloat","toFixed","Display","id","className","Buttons","onClick","zero","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.63fc725c.chunk.js","sourcesContent":["// negetive intergers need to be created before calulation from equal button\r\n// deciaml numbers are getting split with the sumString is siplit into array in equalPress function\r\n\r\n// minus should only be passed to numPress if it has a number after it \r\n\r\nimport React, {useState} from 'react';\r\nimport 'bootstrap';\r\n\r\nlet screenEntry= \"0\";\r\nlet screenSum = \"0\";\r\nlet calculation = 0;\r\nlet operatorPressed = false;\r\nlet cePressed = false;\r\nlet decPointPressed = false;\r\nlet equalPressed = false;\r\nlet currentOperator = \"\";\r\nlet negIntMinus = false;\r\n\r\n\r\nconst displaySet = (entry, sum) =>{\r\n  document.getElementById(\"display\").innerHTML = entry;\r\n  document.getElementById(\"disString\").innerHTML = sum;   \r\n}\r\n\r\n\r\nconst maxLength = () =>{\r\n    console.log(\"maxLength screenSum\", screenSum);\r\n    const maxLengthString = screenSum.toString().replace(/\\&#247;|\\&#215;/g, \" \");\r\n    console.log(\"maxLength screenSum Replaced\", maxLengthString);\r\n    \r\n    if (screenEntry.length > 8 || maxLengthString.length >= 23){\r\n      console.log(screenSum);\r\n      return true;\r\n    }else{\r\n      return false;\r\n    }\r\n}\r\n\r\nconst clearScreen = () => {\r\n    screenEntry = \"0\";\r\n    screenSum = \"0\";\r\n    calculation = 0;\r\n    displaySet(\"0\",\"Limit\");      \r\n}\r\n\r\nconst acReset = () => {\r\n    calculation = 0;\r\n    decPointPressed = false;\r\n    equalPressed = false;\r\n    screenEntry = \"0\";\r\n    screenSum = \"0\";\r\n    displaySet(screenEntry, screenSum);\r\n}\r\n\r\nconst ceReset = () => {  \r\n    operatorPressed = false;\r\n    cePressed = true;\r\n    decPointPressed = false;\r\n    screenEntry = \"0\";    \r\n    const endClip = /\\+$|\\-$|\\&#247;$|\\&#215;$|\\d+\\.\\d+$|\\d+$|\\.$|\\d+\\.$|^\\-\\d+$|^\\-\\d+\\.\\d+$/;\r\n    console.log(\"CE screenSum before replace\",screenSum)\r\n\r\n    if (equalPressed){\r\n      return\r\n    }else if (!equalPressed){\r\n      console.log(\"epPressed\", equalPressed, \"screenSum\", screenSum);\r\n      screenSum = screenSum.toString().replace(endClip,\"\");\r\n    }\r\n    console.log(\"CE screenSum after replace\",screenSum)\r\n \r\n  if(screenSum === \"\"){\r\n      screenSum = \"0\";\r\n    }\r\n\r\n    displaySet(screenEntry, screenSum);\r\n}\r\n\r\nconst numPress = (num) => {\r\n  \r\n  if (screenEntry === \"-\"  && /\\d$/.test(num) == true){\r\n    screenSum += currentOperator;\r\n  //  screenEntry += num;\r\n //   screenEntry += num  \r\n    screenSum += screenEntry;\r\n //   screenSum += \"-\";\r\n //   screenSum += num;\r\n\r\n    currentOperator = \"\";\r\n    document.getElementById(\"disString\").innerHTML = screenSum; \r\n  }\r\n  \r\n  //  if (/\\D$/.test(screenEntry) && currentOperator !== \"-\") {    \r\n    if (screenEntry !== \"-\" && /\\d$/.test(num) === true) {      \r\n      console.log(\"Number adds operator to Sum display\", currentOperator, \"screenSum\", screenSum)\r\n      screenSum += currentOperator;\r\n      currentOperator = \"\";\r\n      document.getElementById(\"disString\").innerHTML = screenSum; \r\n    } \r\n\r\n\r\n\r\n  if (maxLength() === false){     \r\n    if(screenEntry === \"0\" && screenSum === \"0\" || calculation === \"0\" && equalPressed === true){\r\n      screenEntry=\"\";\r\n      screenSum=\"\";\r\n      calculation = 0;\r\n      equalPressed = false; \r\n    }\r\n\r\n    if(screenEntry === \"0\" && cePressed === true)\r\n      {\r\n        screenEntry=\"\";\r\n      }\r\n\r\n      operatorPressed = false; \r\n     // screenEntry = screenEntry.replace(/\\+|\\&#247;|\\&#215;/g, \"\");\r\n      screenEntry = screenEntry.replace(/\\+|\\-|\\&#247;|\\&#215;/g, \"\");\r\n\r\n    if (cePressed === false  && num !== \"-\" ){\r\n      screenEntry += num;\r\n      screenSum += num;\r\n      displaySet(screenEntry, screenSum);   \r\n\r\n    }else if (num === \"-\"){\r\n        \r\n    }else if (/\\d$/.test(screenSum) !== true && cePressed === true  && num !== \"-\" ){\r\n      cePressed = false;\r\n      screenEntry += num;\r\n      screenSum += num;\r\n      displaySet(screenEntry, screenSum);  \r\n    }\r\n  }else{\r\n    clearScreen();\r\n  }  \r\n}\r\n\r\nconst operatorPress = (op) => {\r\n  /*\r\n  if (op === \"-\" && /\\-$/.test(screenSum) === false){\r\n    numPress(\"-\");\r\n    console.log(\"Minus last line check\",/\\-$/.test(screenSum));\r\n    decPointPressed = false;\r\n    return\r\n  }\r\n\r\n  if (/\\D$/.test(screenSum) === true){\r\n    numPress(op);\r\n    decPointPressed = false;\r\n    return\r\n  }\r\n  */\r\n\r\n\r\n  if (equalPressed === true){\r\n    equalPressed = false;\r\n    screenSum = calculation;\r\n    calculation = 0;\r\n   }\r\n\r\n  if (maxLength() === false){\r\n    decPointPressed = false;\r\n\r\n    if (/\\.$/.test(screenSum) === true){\r\n      screenSum = screenSum.slice(0, -1);\r\n    } \r\n\r\n    if (/\\.0+$/.test(screenSum) === true){  \r\n      screenSum = screenSum.replace(/\\.0+$/, \"\");\r\n    } \r\n\r\n    if (/\\./g.test(screenSum) === true && /0+$/.test(screenSum) === true){\r\n      screenSum = screenSum.replace(/0+$/, \"\");\r\n    } \r\n\r\n    if(screenEntry !== \"0\" && operatorPressed === false  && screenSum !== \"0\"){\r\n      screenEntry = op; \r\n      document.getElementById(\"display\").innerHTML = screenEntry;\r\n      \r\n      if(op !== \"-\"){\r\n        currentOperator = op;\r\n      }\r\n\r\n      if(operatorPressed === false && screenSum !== \"0\" /* &&  /\\-$/.test(screenSum) === false */){\r\n     //   operatorPressed = true;\r\n     //   screenSum += op;\r\n     //   document.getElementById(\"disString\").innerHTML = screenSum;      \r\n        if(op !== \"-\"){\r\n          currentOperator = op;\r\n        }\r\n\r\n      }         \r\n    }\r\n\r\n    if(cePressed === true  && operatorPressed === false  && screenSum !== \"0\" && /\\d$/.test(screenSum) === true /* && /\\-$/.test(screenSum) === false */){\r\n      operatorPressed = true;\r\n      screenEntry = op;  \r\n      \r\n      if(op !== \"-\"){\r\n        currentOperator = op;\r\n      }\r\n         \r\n     // screenSum += op;    \r\n     // displaySet(screenEntry,screenSum); \r\n    // document.getElementById(\"disString\").innerHTML = screenSum;\r\n    }\r\n  }else{\r\n    clearScreen();\r\n  }\r\n}\r\n\r\nconst zeroPress = (zero) => {\r\nif (maxLength() === false){    \r\n\r\n  if(screenEntry !== \"0\"  && operatorPressed === false ){\r\n      screenEntry += zero; \r\n      screenSum += zero;\r\n      displaySet(screenEntry, screenSum);   \r\n    }\r\n\r\n    else if(decPointPressed === true){   \r\n      screenEntry += \"0\";  \r\n      screenSum += \"0\";\r\n      displaySet(screenEntry, screenSum);            \r\n     }\r\n  }else{\r\n    clearScreen();\r\n  }\r\n}\r\n\r\nconst decPointPress = () => {\r\n  if (maxLength() === false){ \r\n    if (decPointPressed === false  && operatorPressed === false && cePressed === false){    \r\n      decPointPressed = true;    \r\n      screenEntry += \".\";   \r\n      screenSum += \".\";\r\n      displaySet(screenEntry, screenSum);  \r\n\r\n    }else if (decPointPressed === false  && operatorPressed === true  && cePressed === false){\r\n      operatorPressed = false;\r\n      decPointPressed = true;    \r\n      screenEntry = \"0.\";   \r\n      screenSum += \"0.\";\r\n      displaySet(screenEntry, screenSum);    \r\n\r\n    }else if (decPointPressed === false && /\\d$/.test(screenSum) !== true && cePressed === true){\r\n      cePressed = false;\r\n      decPointPressed = true;\r\n      screenEntry = \"0.\";\r\n      screenSum += \"0.\";\r\n      displaySet(screenEntry, screenSum);      \r\n    \r\n    }else if (decPointPressed === false  && operatorPressed === false  && screenSum ===\"0\" && cePressed === true){\r\n      cePressed = false;\r\n      decPointPressed = true;\r\n      screenEntry += \".\";  \r\n      screenSum += \".\";\r\n      displaySet(screenEntry, screenSum);  \r\n    }\r\n  }else{\r\n    clearScreen();\r\n  }\r\n}\r\n\r\nconst equalPress = () => {\r\n  if (/\\d$/.test(screenSum) === true){\r\n    console.log(\"equalPress screenSum String\", screenSum);\r\n    screenSum = screenSum.replace(/\\&#247;/g, \"/\").replace(/\\&#215;/g, \"*\").replace(/(\\/)/g, \" $1 \").replace(/(\\*)/g, \" $1 \").replace(/(\\+)/g, \" $1 \").replace(/((?!^)\\-)/g, \" $1 \").split(\" \");\r\n    console.log(\"equalPress screenSum Array\", screenSum);\r\n\r\n    // Sort Array \r\n    for(var i = 0; i < screenSum.length; i++){\r\n      // spaces\r\n      if(screenSum[i] === \"\"){  \r\n        screenSum.splice(i,1); \r\n        console.log (\"space removed\", screenSum, \"screenSum[i]\", screenSum[i]);   \r\n      }\r\n      // negetive integers\r\n      // Number.isInteger(parseInt(screenSum[i-1])) === false\r\n      if (screenSum[i] === \"-\" && /\\+|\\-|\\*|\\//.test(screenSum[i-1]) === true ){\r\n        const negInt = screenSum[i].concat(screenSum[i+1]);\r\n        screenSum.splice(i,1);\r\n        screenSum.splice(i,1);\r\n        screenSum.splice(i,0,negInt) \r\n        console.log(\"negetive interger\", screenSum);\r\n      // calculation += parseFloat(screenSum[i]);    \r\n      }\r\n    }\r\n    \r\n\r\n\r\n    // Calculate Array\r\n    for(var i = 0; i < screenSum.length; i++){\r\n\r\n      if (i === 0 ){\r\n        calculation += parseFloat(screenSum[i]);\r\n      }\r\n \r\n      if (/\\//.test(screenSum[i]) == true){\r\n        calculation /= parseFloat(screenSum[i + 1]);\r\n      }  \r\n  \r\n      if (/\\*/.test(screenSum[i]) == true){\r\n        calculation *= parseFloat(screenSum[i + 1]);\r\n      }  \r\n \r\n      if (/\\+/.test(screenSum[i]) == true){\r\n        calculation += parseFloat(screenSum[i + 1]);\r\n      } \r\n              \r\n      if(/^\\-$/.test(screenSum[i]) == true) {\r\n        console.log(\"just a minus\",calculation);\r\n        calculation -= parseFloat(screenSum[i + 1]);\r\n      }\r\n    }\r\n   \r\n    console.log(\"Equal calculation\",calculation);\r\n    calculation = calculation.toFixed(4).replace(/\\.0+$|0+$/,\"\");\r\n\r\n    if (calculation.length > 8){ \r\n    clearScreen();        \r\n      \r\n    }else{\r\n      document.getElementById(\"display\").innerHTML = calculation;\r\n      document.getElementById(\"disString\").innerHTML +=\"=\"+calculation;  \r\n      equalPressed = true;\r\n\r\n      if (calculation === \"0\"){\r\n        screenEntry = \"0\";\r\n        screenSum = \"0\";\r\n      }\r\n    }  \r\n  }\r\n}\r\n\r\nconst Display = () => {\r\n  return (\r\n    <div id=\"screen\" className=\"text-right\">\r\n      <p id=\"display\">0</p>\r\n      <p id=\"disString\">0</p>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst Buttons = () => {\r\n  return (\r\n    <>\r\n      <button onClick={acReset} id=\"clear\">AC</button>\r\n      <button onClick={ceReset} id=\"CE\">CE</button>\r\n      <button onClick={() => {operatorPress(\"&#247;\")}} id=\"divide\">&#247;</button>\r\n      <button onClick={() => {operatorPress(\"&#215;\")}} id=\"multiply\">&#215;</button>  \r\n      <button onClick={() => {numPress(\"7\")}} id=\"seven\">7</button>\r\n      <button onClick={() => {numPress(\"8\")}} id=\"eight\">8</button>\r\n      <button onClick={() => {numPress(\"9\")}} id=\"nine\">9</button>\r\n      <button onClick={() => {operatorPress(\"-\")}} id=\"subtract\">-</button>   \r\n      <button onClick={() => {numPress(\"4\")}} id=\"four\">4</button>\r\n      <button onClick={() => {numPress(\"5\")}} id=\"five\">5</button>\r\n      <button onClick={() => {numPress(\"6\")}} id=\"six\">6</button>\r\n      <button onClick={() => {operatorPress(\"+\")}} id=\"add\">+</button>    \r\n      <button onClick={() => {numPress(\"1\")}} id=\"one\">1</button>\r\n      <button onClick={() => {numPress(\"2\")}} id=\"two\">2</button>\r\n      <button onClick={() => {numPress(\"3\")}} id=\"three\">3</button>  \r\n      <button onClick={equalPress} id=\"equals\">=</button>     \r\n      <button onClick={() => {zeroPress(\"0\")}} id=\"zero\">0</button>\r\n      <button onClick={decPointPress} id=\"decimal\">.</button> \r\n    </> \r\n  )\r\n}\r\n\r\nfunction App(){\r\n  let [displayscreenEntry,setDisplayscreenEntry] = useState(\"0\");\r\n  // Stores the second string for the display screen\r\n  let [displayscreenSum, setDisplayscreenSum] = useState(\"0\");\r\n  \r\n  return (\r\n    <div id=\"calcBase\" className= \"container\">   \r\n      <div id=\"padDiv\">\r\n        <h1 className=\"text-center\">CALCULATOR</h1>\r\n        <Display/>\r\n        <Buttons/>\r\n      </div>          \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/* import './index.css'; */\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './style.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}