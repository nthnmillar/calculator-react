{"version":3,"sources":["audio/909-HiHatClosed-D2.wav","audio/909-HiHatOpen-D0.wav","audio/909-HiTom-0D0.wav","audio/909-HiTom-7D0.wav","audio/909-HiTom-AD0.wav","audio/909-Kick-T0A0A7.wav","audio/909-Kick-T3A0D0.wav","audio/909-Kick-T7A0D0.wav","audio/909-LoTom-0D0.wav","SoundPlay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DrumSound","noise","console","log","Audio","play","SoundPlay","name","drum1","drum2","drum3","drum4","drum5","drum6","drum7","drum8","drum9","DrumButton","props","btnName","className","onClick","App","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,6RCU3C,SAASC,EAAUC,GACfC,QAAQC,IAAI,QAASF,GACT,IAAIG,MAAMH,GAChBI,OAsCKC,MAnCf,SAAmBC,GAEf,OADAL,QAAQC,IAAI,YAAY,YAAaI,GAC9BA,GACL,IAAK,IACHP,EAAUQ,KACV,MACF,IAAK,IACHR,EAAUS,KACV,MACF,IAAK,IACHT,EAAUU,KACV,MACF,IAAK,IACHV,EAAUW,KACV,MACF,IAAK,IACHX,EAAUY,KACV,MACF,IAAK,IACHZ,EAAUa,KACV,MACF,IAAK,IACHb,EAAUc,KACV,MACF,IAAK,IACHd,EAAUe,KACV,MACF,IAAK,IACHf,EAAUgB,KACV,MACF,QACE,SC3CR,SAASC,EAAWC,GAEhB,OADAhB,QAAQC,IAAI,aAAce,EAAMC,SAE9B,yBAAKC,UAAU,eAAeC,QAAS,WAAOf,EAAUY,EAAMC,WAC5D,uBAAGC,UAAU,eAAeF,EAAMC,UA6B3BG,MAxBf,WACE,OACI,yBAAKF,UAAU,YAAYG,GAAG,gBAC5B,yBAAKA,GAAG,YAEN,yBAAKH,UAAU,MAAMG,GAAG,SACtB,kBAACN,EAAD,CAAYE,QAAQ,MACpB,kBAACF,EAAD,CAAYE,QAAQ,MACpB,kBAACF,EAAD,CAAYE,QAAQ,OAEtB,yBAAKC,UAAU,OACb,kBAACH,EAAD,CAAYE,QAAQ,MACpB,kBAACF,EAAD,CAAYE,QAAQ,MACpB,kBAACF,EAAD,CAAYE,QAAQ,OAEtB,yBAAKC,UAAU,OACb,kBAACH,EAAD,CAAYE,QAAQ,MACpB,kBAACF,EAAD,CAAYE,QAAQ,MACpB,kBAACF,EAAD,CAAYE,QAAQ,SCnBZK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.0d70aa3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/909-HiHatClosed-D2.bf48fb20.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-HiHatOpen-D0.67b2afb3.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-HiTom-0D0.4aa175c9.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-HiTom-7D0.f3f467ec.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-HiTom-AD0.951485da.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-Kick-T0A0A7.eff3fdee.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-Kick-T3A0D0.53be264b.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-Kick-T7A0D0.d5c55c01.wav\";","module.exports = __webpack_public_path__ + \"static/media/909-LoTom-0D0.92968b71.wav\";","import drum1 from './audio/909-HiHatClosed-D2.wav';\r\nimport drum2 from './audio/909-HiHatOpen-D0.wav';\r\nimport drum3 from './audio/909-HiTom-0D0.wav';\r\nimport drum4 from './audio/909-HiTom-7D0.wav';\r\nimport drum5 from './audio/909-HiTom-AD0.wav';\r\nimport drum6 from './audio/909-Kick-T0A0A7.wav';\r\nimport drum7 from './audio/909-Kick-T3A0D0.wav';\r\nimport drum8 from './audio/909-Kick-T7A0D0.wav';\r\nimport drum9 from './audio/909-LoTom-0D0.wav';\r\n\r\nfunction DrumSound(noise){\r\n    console.log(\"audio\", noise);\r\n    let audio = new Audio(noise);\r\n    audio.play();\r\n}\r\n\r\nfunction SoundPlay(name){ \r\n    console.log(\"SoundPlay\",\"soundName\", name);\r\n    switch(name){\r\n      case \"Q\":\r\n        DrumSound(drum1);\r\n        break;\r\n      case \"W\":\r\n        DrumSound(drum2);\r\n        break;\r\n      case \"E\":\r\n        DrumSound(drum3);\r\n        break;\r\n      case \"A\":\r\n        DrumSound(drum4);\r\n        break;\r\n      case \"S\":\r\n        DrumSound(drum5);\r\n        break;\r\n      case \"D\":\r\n        DrumSound(drum6);\r\n        break;\r\n      case \"Z\":\r\n        DrumSound(drum7);\r\n        break;\r\n      case \"X\":\r\n        DrumSound(drum8);\r\n        break;\r\n      case \"C\":\r\n        DrumSound(drum9);\r\n        break;                                     \r\n      default:\r\n        return \r\n      }\r\n}\r\n\r\nexport default SoundPlay;","import React from 'react';\r\nimport 'bootstrap';\r\nimport SoundPlay from \"./SoundPlay\";\r\n    \r\nfunction DrumButton(props){\r\n    console.log(\"DrumButton\", props.btnName);\r\n    return (\r\n      <div className=\"drum-pad col\" onClick={() => {SoundPlay(props.btnName)}}>\r\n        <p className=\"text-center\">{props.btnName}</p>\r\n      </div>\r\n    )\r\n}\r\n\r\nfunction App(){\r\n  return (\r\n      <div className=\"container\" id=\"drum-machine\">\r\n        <div id=\"display\">\r\n        </div>                 \r\n          <div className=\"row\" id=\"row-1\">  \r\n            <DrumButton btnName=\"Q\"/>\r\n            <DrumButton btnName=\"W\"/>\r\n            <DrumButton btnName=\"E\"/>                                  \r\n          </div>\r\n          <div className=\"row\">  \r\n            <DrumButton btnName=\"A\"/>\r\n            <DrumButton btnName=\"S\"/>\r\n            <DrumButton btnName=\"D\"/>                                  \r\n          </div>\r\n          <div className=\"row\">  \r\n            <DrumButton btnName=\"Z\"/>\r\n            <DrumButton btnName=\"X\"/>\r\n            <DrumButton btnName=\"C\"/>                                  \r\n          </div>     \r\n      </div>     \r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/* import './index.css'; */\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './style.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}